name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_HUB_REPOSITORY: restaurant-api
  INFRA_DIRECTORY: .infra/
  EKS_DIRECTORY: .infra/kubernetes/

jobs:
  test:
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.21.3'

      - name: Cache Go modules
        id: cache-go-mod
        uses: actions/cache@v2
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Run tests
        run: go test -v ./...

      - name: Run tests with coverage
        run: go test -coverprofile=coverage.out ./...

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build_docker:
    name: Build Docker Image
    if: false
    runs-on: ubuntu-latest
    needs: test
    permissions:
      packages: write
      contents: write
      attestations: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: "${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_HUB_REPOSITORY }}"

      - name: Set short git commit SHA
        id: vars
        run: |
          # calculatedSha=$(git rev-parse --short ${{ github.sha }})
          # echo "::set-output name=docker_tag::${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_HUB_REPOSITORY }}:$calculatedSha"
          echo "::set-output name=docker_tag::${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_HUB_REPOSITORY }}:latest"

      - name: Confirm git commit SHA output
        run: |
          echo ${{ steps.vars.outputs.short_sha }}
          echo ${{ steps.vars.outputs.docker_tag }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.vars.outputs.docker_tag }}

  deploy:
    name: Deploy Kubernetes
    if: false
    runs-on: ubuntu-latest
    needs: build_docker
    permissions:
      packages: write
      contents: write
      attestations: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Configure AWS Credentials for GitHub Actions
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          # lambda_layer_publish: true

      - name: AWS get-caller-identity
        run: |
          aws sts get-caller-identity

      - name: Set up Kubectl
        uses: azure/k8s-set-context@v1
        with:
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: EKS apply secrets
        run: |
          ls -la 
          kubectl apply -f ${{ env.EKS_DIRECTORY }}secrets.yaml

      - name: EKS apply deployment
        run: |
          # sed -i "s|image:.*|image: ${{ steps.vars.outputs.docker_tag }}|g" ${{ env.EKS_DIRECTORY }}deployment.yaml
          kubectl delete -f ${{ env.EKS_DIRECTORY }}deployment.yaml
          kubectl apply -f ${{ env.EKS_DIRECTORY }}deployment.yaml

      - name: EKS apply hpa
        run: |
          kubectl apply -f ${{ env.EKS_DIRECTORY }}hpa.yaml

      - name: EKS apply service
        run: |
          kubectl apply -f ${{ env.EKS_DIRECTORY }}service.yaml
